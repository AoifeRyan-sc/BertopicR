% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/modify_topics.R
\name{bt_outliers_embeddings}
\alias{bt_outliers_embeddings}
\title{#' Calculates Topic-Document Probability Matrix
#'
#' @description
#' Uses hdbscan soft clustering to create a matrix with a row per document and
#' column per model topic. The intersection of row and column is the probability
#' that that document is part of that topic. This is only applicable for models
#' created using a hdbscan clustering method (bt_make_clusterer_hdbscan or equivalent)
#'
#'
#' @param fitted_model Output of bt_fit_model() or another bertopic topic model. The model must have been fitted to data.
#'
#' @return topic-document probability matrix
#' @export
#'
bt_probability_matrix <- function(fitted_model){
\subsection{input validation}{Check fitted model

test_is_fitted_model(fitted_model)
}}
\usage{
bt_outliers_embeddings(
  fitted_model,
  documents,
  topics,
  embeddings,
  threshold = 0.3
)
}
\arguments{
\item{fitted_model}{Output of bt_fit_model() or another bertopic topic model. The model must have been fitted to data.}

\item{documents}{documents to which the model was fit}

\item{topics}{current topics associated with the documents}

\item{embeddings}{embeddings used to create topics}

\item{threshold}{minimum probability for outlier to be reassigned}
}
\value{
df with document, old topic, new topic
}
\description{
Uses the cosine similarity of the document embeddings to find the
topic closest to each outlier document and reassigns these documents accordingly.
Note that the purpose
of this function is to obtain a new list of topics that can then be used to
update the model, it does not make any changes to the model itself, the topic
classification the model outputs does not change after running this function.
The bt_update_topics function needs to be used to make the change to the model
itself.
}
\section{validate hdbscan model used as clusterer}{
if(!any(grepl("hdbscan\\.hdbscan_\\.HDBSCAN", methods::S3Class(fitted_model$hdbscan_model)))){
stop("Clustering method is: ", methods::S3Class(fitted_model$hdbscan_model)[\link{1}], "\nProbability Matrix required HDBSCAN." )
}
\subsection{end of input validation}{
}
}

\section{import hdbscan}{
hdb <- reticulate::import("hdbscan")
}

\section{get probability matrix}{
probability_matrix <- hdb$all_points_membership_vectors(fitted_model$hdbscan_model)
}

\section{set environment so that py_eval can access local variables}{
withr::with_options(c(reticulate.engine.environment = rlang::current_env()), {

\if{html}{\out{<div class="sourceCode">}}\preformatted{# map probabilities to topics incase any topic merging occured before this
probability_matrix_mapped <- reticulate::py_eval("r.fitted_model._map_probabilities(r.probability_matrix)")
}\if{html}{\out{</div>}}

})

return(probability_matrix_mapped)
}
#' Redistributes outliers based on document-topic probability
#'
#' @description Uses hdbscan soft clustering calculated probabilities to find
#' the most appropriate topic for each outlier (topic -1) document. Returns a df containing
#' the current and potential new topics for each document. Note that the purpose
#' of this function is to obtain a new list of topics that can then be used to
#' update the model, it does not make any changes to the model itself, the topic
#' classification the model outputs does not change after running this function.
#' The bt_update_topics function needs to be used to make the change to the model
#' itself.
#'
#' @details If clustering was performed using hdbscan, you will likely have a
#' number of topics in the -1 outlier category. Soft clustering is a clustering
#' method that assigns a probability of being in each cluster to each datum. We
#' can use the hdbscan soft clustering capabilities to reassign the outlier documents
#' to topics based on these probabilities.
#'
#' @param fitted_model Output of bt_fit_model() or another bertopic topic model. The model must have been fitted to data.
#' @param documents documents to which the model was fit
#' @param topics current topics associated with the documents
#' @param probability_matrix topic-document probability matrix (probability of each document being a member of each topic). This can be obtained using the bt_probability_matrix function
#' @param threshold minimum probability for outlier to be reassigned
#'
#' @return df with document, old topic, new topic
#' @export
#'
bt_outliers_probs <- function(fitted_model,
documents,
topics,
probability_matrix,
threshold = 0.3){

#Input validation
}

\section{check is fitted model}{
if(!is.null(fitted_model)) {
test_is_fitted_model(fitted_model)
}
}

\section{check probability matrix is matrix}{
if(!is.null(probability_matrix) & !is.matrix(probability_matrix)){
stop("topic-document probabilitiy matrix must be a matrix")
}
}

\section{check inputs}{
stopifnot(dim(probability_matrix)\link{1} == length(documents), # same number of docs
dim(probability_matrix)\link{2} == length(unique(topics)) - 1, # same number of topics
is.character(documents),
is.numeric(threshold))
}

\section{check same number topics as docs}{

}

